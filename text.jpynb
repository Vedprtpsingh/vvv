import os
import time
import logging
import subprocess
import signal
from typing import List, Optional
from datetime import datetime

class YouTubeStreamManager:
    def __init__(self, stream_key: str, video_paths: List[str], bitrate: int = 3000):
        """
        Initialize the YouTube stream manager.
        
        Args:
            stream_key: YouTube stream key
            video_paths: List of video file paths/URLs
            bitrate: Video bitrate in kbps (default: 3000)
        """
        self.stream_key = stream_key
        self.video_paths = video_paths
        self.bitrate = bitrate
        self.current_process: Optional[subprocess.Popen] = None
        self.running = True
        
        # Set up logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('youtube_stream.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # Register signal handlers
        signal.signal(signal.SIGINT, self._handle_shutdown)
        signal.signal(signal.SIGTERM, self._handle_shutdown)

    def _handle_shutdown(self, signum, frame):
        """Handle graceful shutdown on signals."""
        self.logger.info("Received shutdown signal. Stopping stream...")
        self.running = False
        if self.current_process:
            self.current_process.terminate()

    def _build_ffmpeg_command(self, video_path: str) -> List[str]:
        """Build FFmpeg command as a list of arguments."""
        return [
            'ffmpeg',
            '-re',  # Read input at native framerate
            '-i', video_path,
            '-c:v', 'libx264',
            '-preset', 'veryfast',
            '-b:v', f'{self.bitrate}k',
            '-c:a', 'aac',
            '-b:a', '192k',
            '-f', 'flv',
            f'rtmp://a.rtmp.youtube.com/live2/{self.stream_key}'
        ]

    def _stream_video(self, video_path: str) -> bool:
        """
        Stream a single video using FFmpeg.
        
        Returns:
            bool: True if stream completed successfully, False otherwise
        """
        try:
            command = self._build_ffmpeg_command(video_path)
            self.logger.info(f"Starting stream for {video_path}")
            
            # Start FFmpeg process
            self.current_process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # Wait for process to complete
            stdout, stderr = self.current_process.communicate()
            exit_code = self.current_process.returncode
            
            if exit_code != 0:
                self.logger.error(f"FFmpeg error (exit code {exit_code}): {stderr.decode()}")
                return False
                
            self.logger.info(f"Stream completed successfully for {video_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"Stream error for {video_path}: {str(e)}")
            return False
        finally:
            self.current_process = None

    def start_streaming(self, retry_delay: int = 7):
        """
        Start the streaming loop.
        
        Args:
            retry_delay: Delay in seconds between retry attempts
        """
        self.logger.info("Starting YouTube stream manager")
        
        while self.running:
            for video_path in self.video_paths:
                if not self.running:
                    break
                    
                # Verify video file/URL is accessible
                if not video_path.startswith('http') and not os.path.exists(video_path):
                    self.logger.error(f"Video file not found: {video_path}")
                    continue
                
                success = self._stream_video(video_path)
                
                if self.running:  # Only delay if we're still meant to be running
                    self.logger.info(f"Waiting {retry_delay} seconds before next video...")
                    time.sleep(retry_delay)
        
        self.logger.info("Stream manager stopped")

def main():
    # YouTube stream key
    stream_key = "3pfg-fdhy-a2cu-s6vg-0hae"
    
    # List of video file paths
    video_paths = [
        "https://hanuman.s3.us-south.cloud-object-storage.appdomain.cloud/0000.mp4?X-Amz-Signature=valid-pre-signed-url-token",
        "https://hanuman.s3.us-south.cloud-object-storage.appdomain.cloud/0001.mp4?X-Amz-Signature=valid-pre-signed-url-token",
        "https://hanuman.s3.us-south.cloud-object-storage.appdomain.cloud/0002.mp4?X-Amz-Signature=valid-pre-signed-url-token",
    ]
    
    # Create and start the stream manager
    manager = YouTubeStreamManager(stream_key, video_paths)
    manager.start_streaming()

if __name__ == "__main__":
    main()
